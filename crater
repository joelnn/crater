#!/bin/bash

is_sourced() {
  [ "$0" != "$BASH_SOURCE" ]
}

packages() {
  local _packages;
  read -r -d '' _packages << "PACKAGES"
lua-5.1.0 1ae9ec317511d525c7999c842ca0b1ddde84e374 http://www.lua.org/ftp/lua-5.1.tar.gz
lua-5.1.1 be13878ceef8e1ee7a4201261f0adf09f89f1005 http://www.lua.org/ftp/lua-5.1.1.tar.gz
lua-5.1.2 8a460d2d7e70e93cb72bf3d584405464763cb5f0 http://www.lua.org/ftp/lua-5.1.2.tar.gz
lua-5.1.3 89bc9f5a351402565b8077e8123327e7cd15f004 http://www.lua.org/ftp/lua-5.1.3.tar.gz
lua-5.1.4 2b11c8e60306efb7f0734b747588f57995493db7 http://www.lua.org/ftp/lua-5.1.4.tar.gz
lua-5.1.5 b3882111ad02ecc6b972f8c1241647905cb2e3fc http://www.lua.org/ftp/lua-5.1.5.tar.gz
lua-5.2.0 08f84c355cdd646f617f09cebea48bd832415829 http://www.lua.org/ftp/lua-5.2.0.tar.gz
lua-5.2.1 6bb1b0a39b6a5484b71a83323c690154f86b2021 http://www.lua.org/ftp/lua-5.2.1.tar.gz
lua-5.2.2 0857e41e5579726a4cb96732e80d7aa47165eaf5 http://www.lua.org/ftp/lua-5.2.2.tar.gz
lua-5.2.3 926b7907bc8d274e063d42804666b40a3f3c124c http://www.lua.org/ftp/lua-5.2.3.tar.gz
lua-5.2.4 ef15259421197e3d85b7d6e4871b8c26fd82c1cf http://www.lua.org/ftp/lua-5.2.4.tar.gz
lua-5.3.0 1c46d1c78c44039939e820126b86a6ae12dadfba http://www.lua.org/ftp/lua-5.3.0.tar.gz
lua-5.3.1 1676c6a041d90b6982db8cef1e5fb26000ab6dee http://www.lua.org/ftp/lua-5.3.1.tar.gz
lua-5.3.2 7a47adef554fdca7d0c5536148de34579134a973 https://www.lua.org/ftp/lua-5.3.2.tar.gz
lua-5.3.3 a0341bc3d1415b814cc738b2ec01ae56045d64ef https://www.lua.org/ftp/lua-5.3.3.tar.gz
lua-5.3.4 79790cfd40e09ba796b01a571d4d63b52b1cd950 https://www.lua.org/ftp/lua-5.3.4.tar.gz
luajit-2.0.0 b942f05d41ee193becad285618e7874d113cb976 http://luajit.org/download/LuaJIT-2.0.0.tar.gz
luajit-2.0.1 330492aa5366e4e60afeec72f15e44df8a794db5 http://luajit.org/download/LuaJIT-2.0.1.tar.gz
luajit-2.0.2 d21426c4fc6ad8888255139039a014f7e28e7300 http://luajit.org/download/LuaJIT-2.0.2.tar.gz
luajit-2.0.3 2db39e7d1264918c2266b0436c313fbd12da4ceb http://luajit.org/download/LuaJIT-2.0.3.tar.gz
luajit-2.0.4 6e533675180300e85d12c4bbeea2d0e41ad21172 http://luajit.org/download/LuaJIT-2.0.4.tar.gz
luajit-2.1.0-beta1 500470455ca36b0faaa52856c8f721784ab7b182 http://luajit.org/download/LuaJIT-2.1.0-beta1.tar.gz
luajit-2.1.0-beta2 59f5e037f9dfa2db21df42fc483cce63b5798f51 http://luajit.org/download/LuaJIT-2.1.0-beta2.tar.gz
luarocks-2.2.2 eb867374e5a11edb705fd9fab3b47b083a9e55a6 http://keplerproject.github.io/luarocks/releases/luarocks-2.2.2.tar.gz
luarocks-2.3.0 5f1e1658ef8c7c9710fbc751cad79eb69ae2a891 http://luarocks.github.io/luarocks/releases/luarocks-2.3.0.tar.gz
luarocks-2.4.2 3e595956eab7192036a4993c24125284cd789894 http://luarocks.github.io/luarocks/releases/luarocks-2.4.2.tar.gz
PACKAGES
  echo "$_packages"
}

package_versions(){
  (set -o pipefail; packages | cut -d ' ' -f1)
  return $?
}

package() {
  local _version; _version="$1";
  (set -o pipefail; packages | grep "^$_version ")
  return $?
}

package_sha1sum() {
  local _version; _version="$1";
  (set -o pipefail;  package "$_version" | cut -d ' ' -f2)
  return $?
}

package_url() {
  local _version; _version="$1";
  (set -o pipefail; package "$_version" | cut -d ' ' -f3)
  return $?
}

check_prereqs() {
  if ! command -v 'cc'; then
    echo "'cc' (C compiler) not installed, required to build lua." 1>&2
    return 1
  fi

  if ! command -v 'unzip'; then
    echo "'unzip' not installed, required by luarocks." 1>&2
    return 1
  fi
}

download() {
  local _curl; _curl="$(command -v curl)";
  if [ "x$_curl" != "x" ]; then
    "$_curl" -LfsS "$1" --output "$2"
    return $?
  fi

  local _wget; _wget="$(command -v wget)";
  if [ "x$_wget" != "x" ]; then
    "$_wget" --max-redirect 1 --quiet "$1" --output-document "$2"
    return $?
  fi

  return 1
}

sha1() {
  local _sha1_file; _sha1_file="$1"; shift

  (set -o pipefail; sha1sum -b "$_sha1_file" 2> /dev/null | cut -d ' ' -f1)
}

sha1_check() {
  local _file_path; _file_path="$1"; shift
  local _file_sha1; _file_sha1="$1"; shift

  [ -f "$_file_path" -a "x$_file_sha1" != "x" ] &&
    [ "$(sha1 "$_file_path")" == "$_file_sha1" ]
}

download_sha1() {
  local _url; _url="$1"; shift
  local _file; _file="$1"; shift
  local _sha1; _sha1="$1"; shift

  if [ -f "$_file" ] && sha1_check "$_file" "$_sha1"; then
    return 0;
  fi

  download "$_url" "$_file" && sha1_check "$_file" "$_sha1"
}

extract_tgz() {
  local _tgz_url; _tgz_url="$1"; shift
  local _tgz_sha1; _tgz_sha1="$1"; shift

  local _tgz_basename; _tgz_basename="$(basename "$_tgz_url")" 
  local _tgz_cache; _tgz_cache="$crater_cache_dir/$_tgz_basename"
  local _tgz_dir_basename; _tgz_dir_basename="${_tgz_basename%.tar.gz}"

  local _tmp_dir;
  
  download_sha1 "$_tgz_url" "$_tgz_cache" "$_tgz_sha1" &&
    _tmp_dir="$(mktemp -d --tmpdir="$crater_tmp_dir" "$_tgz_basename.XXXX")" &&
    tar -xzf "$_tgz_cache" -C "$_tmp_dir" &&
    echo "$_tmp_dir/"*
}

mark_installed() {
  local _name;
  for _name in $@; do
    touch "$crater_install_dir/.installed_$_name" || return $?
  done
}

check_installed() {
  local _name;
  for _name in $@; do
    if [ ! -f "$crater_install_dir/.installed_$_name" ]; then
      return 1;
    fi
  done
}

check_compile() {
   local _src; _src="$1"; shift

   echo "$_src" | 
     if [ $# -gt 0 ]; then
       cc -o /dev/null -x c - "$@" 2> /dev/null;
     else
       cc -o /dev/null -x c - 2> /dev/null;
     fi
}

check_library() {
  local _library; _library="$1"; shift
  check_compile "int main(){}" "-l$_library"
}

install_lua() {
  local _lua_tgz_url; _lua_tgz_url="$1"; shift
  local _lua_tgz_sha1; _lua_tgz_sha1="$1"; shift

  local _install_prefix; _install_prefix="$crater_install_dir";
  mkdir -p "$crater_install_dir" || return $? 
  (
    local _lua_src;
    _lua_src="$(extract_tgz "$_lua_tgz_url" "$_lua_tgz_sha1")" || return $?

    cd "$_lua_src"
    local MAKEOPTS;
    if grep -q LuaJIT Makefile; then

      MAKEOPTS="PREFIX='$_install_prefix' INSTALL_INC='$_install_prefix/include'"
      make -j8 $MAKEOPTS &&
        make $MAKEOPTS install &&
        if [ ! -e "$_install_prefix/bin/lua" ]; then
          (
            cd "$_install_prefix/bin"
            # symlink to luajit
            for f in luajit*; do
              if [ -f "$f" ]; then
                ln -s "$f" lua
                break
              fi
            done
          )
        fi

    else

      (rm src/luaconf.h; sed 's/#define LUA_ROOT[ \t].*/#define LUA_ROOT\t"'"$(echo "${_install_prefix}/" | sed 's/\//\\\//g')"'"/g' > src/luaconf.h) < src/luaconf.h
      if ! check_library 'readline'; then
        # disable readline support
        sed -i'' '/LUA_USE_READLINE/d' src/luaconf.h
        sed -i'' 's/-lreadline//g' src/Makefile
      fi
      if ! check_library 'ncurses'; then
        # disable ncurses support (lua-5.2.x?)
        sed -i'' 's/-lncurses//g' src/Makefile
      fi

      MAKEOPTS="INSTALL_TOP='$_install_prefix'"
      local _luapc="$_install_prefix/lib/pkgconfig/lua.pc"
      make -j8 $MAKEOPTS linux &&
        make $MAKEOPTS linux install &&
        mkdir -p "$_install_prefix/lib/pkgconfig" &&
        (make $MAKEOPTS pc > "$_luapc"  || rm -v "$_luapc")

    fi

    if [ ! -e "$_install_prefix/bin/lua" ]; then
      echo 'lua binary not found' 1>&2
      exit 1
    fi
  
    cd ../ && rm -rvf "$_lua_src"
  ) 2>&1 | tee "$crater_install_dir/.log_install_lua"
  return ${PIPESTATUS[0]};
}

install_luarocks() {
  local _luarocks_tgz_url; _luarocks_tgz_url="$1"; shift
  local _luarocks_tgz_sha1; _luarocks_tgz_sha1="$1"; shift

  local _install_prefix; _install_prefix="$crater_install_dir";
  (
    local _luarocks_src;
    _luarocks_src="$(extract_tgz "$_luarocks_tgz_url" "$_luarocks_tgz_sha1")" &&
      cd "$_luarocks_src" &&
      ./configure --prefix="$_install_prefix" --sysconfdir="$_install_prefix" --with-lua="$_install_prefix" --force-config &&
      make &&
      make install &&
      cd ../ && rm -rvf "$_luarocks_src"
  ) 2>&1 | tee "$crater_install_dir/.log_install_luarocks"
  return ${PIPESTATUS[0]};
}

if [ "$CRATER_SOURCE_ONLY" == "1" ] && is_sourced; then
  return
fi

: ${CRATER_ROOT:="$(dirname "$BASH_SOURCE")/.crater"}
# require that CRATER_ROOT be a dot-dir prefixed with '.crater'.
# since crater will be "rm -rf"-ing things beneath this dir, and
# generally treating it as its own space, we need to make sure
# it's not something like '/' or '/home/foo' or '/usr'.
CRATER_ROOT="$(readlink -f "$CRATER_ROOT")"
if [[ "$?" -ne "0" || "$(basename "$CRATER_ROOT")" != ".crater"* ]]; then
  if is_sourced; then
    return 1;
  else
    exit 1;
  fi
fi

if [ -d "$CRATER_ROOT/current" -a \( -z "$CRATER_LUA" -o -z "$CRATER_LUAROCKS" \) ]; then
  crater_current="$(readlink -e "$CRATER_ROOT/current")"
  if [ -z "$CRATER_LUAROCKS" ]; then
    CRATER_LUAROCKS=$(basename "$crater_current")
  fi
  if [ -z "$CRATER_LUA" ]; then
    CRATER_LUA="$(basename "$(dirname "$crater_current")")"
  fi
else
  : ${CRATER_LUA:="lua-5.3.4"}
  : ${CRATER_LUAROCKS:="luarocks-2.4.2"}
fi
crater_install_dir="$CRATER_ROOT/${CRATER_LUA}/${CRATER_LUAROCKS}"

if ! check_installed 'all'; then
  (
    crater_tmp_dir="$CRATER_ROOT/tmp"
    crater_cache_dir="$CRATER_ROOT/cache"

    mkdir -p "$crater_tmp_dir" "$crater_cache_dir" "$crater_install_dir"

    exec &> "$CRATER_ROOT"/lastlog

    set -x; export SHELLOPTS;

    lua_tgz_url="$(package_url $CRATER_LUA)"
    lua_tgz_sha1="$(package_sha1sum $CRATER_LUA)"

    luarocks_tgz_url="$(package_url $CRATER_LUAROCKS)"
    luarocks_tgz_sha1="$(package_sha1sum $CRATER_LUAROCKS)"

    rm -rf "$crater_install_dir"
    check_prereqs &&
      install_lua "$lua_tgz_url" "$lua_tgz_sha1" 'all' &&
      install_luarocks "$luarocks_tgz_url" "$luarocks_tgz_sha1" &&
      mark_installed "$lua_tgz_sha1" "$luarocks_tgz_sha1" 'all' &&
      rm -rf "$crater_tmp_dir"/{*,.[!.]*,..?*} || exit $?
    if [ "$(readlink -f "$CRATER_ROOT/current")" != "$crater_install_dir" ]; then
      ln -nfs "$crater_install_dir" "$CRATER_ROOT/current"
    fi
  )
  install_result=$?
  if [ "$install_result" -ne 0 ]; then
    if is_sourced; then
      return $install_result
    else
      exit $install_result
    fi
  fi
fi

export CRATER_PATH_PREFIX="$crater_install_dir/bin"
if [ -z "$CRATER_PATH_ORIGINAL" ]; then
  export CRATER_PATH_ORIGINAL="$PATH"
fi
export PATH="$CRATER_PATH_PREFIX:$CRATER_PATH_ORIGINAL"

export CRATER_PKG_CONFIG_PATH_PREFIX="$crater_install_dir/lib/pkgconfig"
if [ -z "$CRATER_PKG_CONFIG_PATH_ORIGINAL" ]; then
  export CRATER_PKG_CONFIG_PATH_ORIGINAL="$PKG_CONFIG_PATH"
fi
export PKG_CONFIG_PATH="$CRATER_PKG_CONFIG_PATH_PREFIX:$CRATER_PKG_CONFIG_PATH_ORIGINAL"

if [ $# -gt 0 ]; then
  exec "$@"
fi

